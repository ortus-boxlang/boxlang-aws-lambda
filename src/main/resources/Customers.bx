/**
 * Customers API handler for BoxLang AWS Lambda Runtime
 * This class is automatically loaded when the URI path starts with "/customers"
 */
class {

    /**
     * Default handler method for customers endpoints
     *
     * @param event The AWS Lambda event containing request data
     * @param context The AWS Lambda context
     * @param response The response struct that will be returned
     */
    function run( event, context, response ) {
        var httpMethod = event.requestContext?.http?.method ?: event.httpMethod ?: "GET";
        var pathParameters = event.pathParameters ?: {};

        switch( httpMethod ) {
            case "GET":
                if( structKeyExists( pathParameters, "id" ) ) {
                    return getCustomer( pathParameters.id );
                } else {
                    return getAllCustomers();
                }
                break;

            case "POST":
                return createCustomer( event.body );
                break;

            case "PUT":
                if( structKeyExists( pathParameters, "id" ) ) {
                    return updateCustomer( pathParameters.id, event.body );
                } else {
                    response.statusCode = 400;
                    return { "error": "Customer ID required for update" };
                }
                break;

            case "DELETE":
                if( structKeyExists( pathParameters, "id" ) ) {
                    return deleteCustomer( pathParameters.id );
                } else {
                    response.statusCode = 400;
                    return { "error": "Customer ID required for deletion" };
                }
                break;

            default:
                response.statusCode = 405;
                return { "error": "Method not allowed" };
        }
    }

    /**
     * Get all customers
     */
    private function getAllCustomers() {
        return {
            "message": "Fetching all customers",
            "data": [
                { "id": 1, "name": "John Doe", "email": "john@example.com" },
                { "id": 2, "name": "Jane Smith", "email": "jane@example.com" },
                { "id": 3, "name": "Bob Johnson", "email": "bob@example.com" }
            ],
            "total": 3
        };
    }

    /**
     * Get a specific customer by ID
     */
    private function getCustomer( id ) {
        return {
            "message": "Fetching customer ##" & id,
            "data": {
                "id": id,
                "name": "Customer " & id,
                "email": "customer" & id & "@example.com",
                "phone": "555-0" & id & "00",
                "address": id & " Main Street, Anytown, USA"
            }
        };
    }

    /**
     * Create a new customer
     */
    private function createCustomer( body ) {
        return {
            "message": "Customer created successfully",
            "data": {
                "id": randRange( 1000, 9999 ),
                "name": "New Customer",
                "email": "newcustomer@example.com",
                "created": now()
            }
        };
    }

    /**
     * Update an existing customer
     */
    private function updateCustomer( id, body ) {
        return {
            "message": "Customer ##" & id & " updated successfully",
            "data": {
                "id": id,
                "name": "Updated Customer " & id,
                "email": "updated" & id & "@example.com",
                "updated": now()
            }
        };
    }

    /**
     * Delete a customer
     */
    private function deleteCustomer( id ) {
        return {
            "message": "Customer ##" & id & " deleted successfully",
            "deletedId": id,
            "deletedAt": now()
        };
    }
}
